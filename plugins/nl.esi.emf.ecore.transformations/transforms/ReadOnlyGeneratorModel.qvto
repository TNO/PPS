/**
 * Copyright (c) 2018-2023 TNO and Contributors to the GitHub community
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
modeltype m_genmodel "strict" uses genmodel('http://www.eclipse.org/emf/2002/GenModel');
modeltype m_ecore "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation ReadOnlyGeneratorModel(inout inoutGenModel : m_genmodel);

main() {
    GenFeature.allInstances().xmap makeReadOnly();
}

mapping inout GenFeature::makeReadOnly() {
    if (self.createChild) {
        self.createChild := false;
    };
	if (self._property = GenPropertyKind::Editable) {
        if (self.ecoreFeature.oclIsKindOf(EReference)
                and self.ecoreFeature.oclAsType(EReference).containment 
                or (not self.ecoreFeature.oclAsType(EReference).eOpposite.oclIsUndefined() 
                    and self.ecoreFeature.oclAsType(EReference).eOpposite.containment)) {
            self._property := GenPropertyKind::None;
        } else {
            self._property := GenPropertyKind::Readonly;
        };
	};
}
