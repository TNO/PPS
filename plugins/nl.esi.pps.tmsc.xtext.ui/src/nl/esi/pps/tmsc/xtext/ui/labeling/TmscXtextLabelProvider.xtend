/**
 * Copyright (c) 2018-2023 TNO and Contributors to the GitHub community
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
// Copyright (c) 2018-2023 TNO and Contributors to the GitHub community
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
/////////////////////////////////////////////////////////////////////////

/*
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.ui.labeling

import com.google.inject.Inject
import nl.esi.pps.architecture.provider.ArchitectureEditPlugin
import nl.esi.pps.tmsc.provider.TmscEditPlugin
import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextPackage
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependency
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependencySettings
import nl.esi.pps.tmsc.xtext.tmscXtext.XEvent
import nl.esi.pps.tmsc.xtext.tmscXtext.XEventType
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunction
import nl.esi.pps.tmsc.xtext.tmscXtext.XNamedArchitectureElement
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

import static extension nl.esi.pps.tmsc.xtext.TmscXtextQueries.*
import static extension org.eclipse.xtext.nodemodel.util.NodeModelUtils.*

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
class TmscXtextLabelProvider extends DefaultEObjectLabelProvider {

    @Inject
    new(AdapterFactoryLabelProvider delegate) {
        super(delegate);
    }

    // Xtext TMSC
    def text(XDependencySettings xDependencySettings) {
        return '''«xDependencySettings.type» settings'''
    }

    // TMSC
    def text(XEvent xEvent) {
        val timestampNode = xEvent.findNodesForFeature(TmscXtextPackage.Literals::XEVENT__TIMESTAMP).head
        return '''«xEvent.type.text» event«IF timestampNode !== null» at «timestampNode.text»«ENDIF»'''
    }

    def image(XEvent xEvent) {
        return '''full/obj16/Event«xEvent.type.getName()».gif'''.fromTmscEditPlugin
    }

    def text(XEventType xEventType) {
        return xEventType.getName().toLowerCase.toFirstUpper
    }

    def image(XDependency dependency) {
        return switch (dependency.type) {
            case DOMAIN: 'full/obj16/DomainDependency.gif'.fromTmscEditPlugin
            case LIFELINE_SEGMENT: 'full/obj16/LifelineSegment.gif'.fromTmscEditPlugin
            case MESSAGE_CONTROL: 'full/obj16/MessageControl.gif'.fromTmscEditPlugin
            case MESSAGE: 'full/obj16/Message.gif'.fromTmscEditPlugin
            case REPLY: 'full/obj16/Reply.gif'.fromTmscEditPlugin
            case REQUEST: 'full/obj16/Request.gif'.fromTmscEditPlugin
        }
    }

    // Architecture
    def text(XNamedArchitectureElement xElement) {
        return xElement.description ?: xElement.name
    }

    def image(XNamedArchitectureElement xElement) {
        return '''full/obj16/«xElement.eClass.name.substring(1)».gif'''.fromArchitectureEditPlugin
    }

    def image(XFunction function) {
        return switch (function) {
            case function.ipcClient: 'full/obj16/IPCClientFunction.gif'.fromArchitectureEditPlugin
            case function.ipcServer: 'full/obj16/IPCServerFunction.gif'.fromArchitectureEditPlugin
            default: 'full/obj16/Function.gif'.fromArchitectureEditPlugin
        }
    }
    
    // Helpers

    private def fromArchitectureEditPlugin(CharSequence path) {
        return '''platform:/plugin/«ArchitectureEditPlugin.INSTANCE.symbolicName»/«path»'''
    }

    private def String fromTmscEditPlugin(CharSequence path) {
        return '''platform:/plugin/«TmscEditPlugin.INSTANCE.symbolicName»/«path»'''
    }
}
