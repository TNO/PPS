/**
 * Copyright (c) 2018-2023 TNO and Contributors to the GitHub community
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
// Copyright (c) 2018-2023 TNO and Contributors to the GitHub community
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
/////////////////////////////////////////////////////////////////////////

/*
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.emf.ecore.EObject
import nl.esi.pps.tmsc.xtext.tmscXtext.XProperty

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class TmscXtextOutlineTreeProvider extends DefaultOutlineTreeProvider {

    override protected _createChildren(IOutlineNode parentNode, EObject modelElement) {
        modelElement.children.forEach[child | createNode(parentNode, child)]
    }
    
    override protected _isLeaf(EObject modelElement) {
        return modelElement.children.isEmpty
    }
    
    /**
     * We do not want to show the properties in the outline 
     */
    def private getChildren(EObject modelElement) {
        return modelElement.eContents().reject(XProperty)
    }
}
