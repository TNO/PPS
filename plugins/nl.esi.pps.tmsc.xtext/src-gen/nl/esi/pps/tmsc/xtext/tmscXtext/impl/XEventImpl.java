/**
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.tmscXtext.impl;

import java.math.BigDecimal;

import java.util.Collection;

import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextPackage;
import nl.esi.pps.tmsc.xtext.tmscXtext.XComponent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependency;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEvent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEventArgument;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEventType;
import nl.esi.pps.tmsc.xtext.tmscXtext.XExecutor;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunction;
import nl.esi.pps.tmsc.xtext.tmscXtext.XProperty;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XEvent</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getTimestamp <em>Timestamp</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getTimeBound <em>Time Bound</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getExecutor <em>Executor</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getComponent <em>Component</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getType <em>Type</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getFunction <em>Function</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getOutgoingDependencies <em>Outgoing Dependencies</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getIncomingDependencies <em>Incoming Dependencies</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getScheduled <em>Scheduled</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XEventImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XEventImpl extends MinimalEObjectImpl.Container implements XEvent
{
  /**
   * The default value of the '{@link #getTimestamp() <em>Timestamp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimestamp()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TIMESTAMP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimestamp() <em>Timestamp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimestamp()
   * @generated
   * @ordered
   */
  protected BigDecimal timestamp = TIMESTAMP_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TIME_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected BigDecimal timeBound = TIME_BOUND_EDEFAULT;

  /**
   * The cached value of the '{@link #getExecutor() <em>Executor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecutor()
   * @generated
   * @ordered
   */
  protected XExecutor executor;

  /**
   * The cached value of the '{@link #getComponent() <em>Component</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponent()
   * @generated
   * @ordered
   */
  protected XComponent component;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final XEventType TYPE_EDEFAULT = XEventType.ENTRY;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected XEventType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected XFunction function;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected EList<XEventArgument> arguments;

  /**
   * The cached value of the '{@link #getOutgoingDependencies() <em>Outgoing Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutgoingDependencies()
   * @generated
   * @ordered
   */
  protected EList<XDependency> outgoingDependencies;

  /**
   * The cached value of the '{@link #getIncomingDependencies() <em>Incoming Dependencies</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncomingDependencies()
   * @generated
   * @ordered
   */
  protected EList<XDependency> incomingDependencies;

  /**
   * The default value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected static final Boolean SCHEDULED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected Boolean scheduled = SCHEDULED_EDEFAULT;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<XProperty> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TmscXtextPackage.Literals.XEVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTimestamp()
  {
    return timestamp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimestamp(BigDecimal newTimestamp)
  {
    BigDecimal oldTimestamp = timestamp;
    timestamp = newTimestamp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__TIMESTAMP, oldTimestamp, timestamp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTimeBound()
  {
    return timeBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeBound(BigDecimal newTimeBound)
  {
    BigDecimal oldTimeBound = timeBound;
    timeBound = newTimeBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__TIME_BOUND, oldTimeBound, timeBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExecutor getExecutor()
  {
    if (executor != null && executor.eIsProxy())
    {
      InternalEObject oldExecutor = (InternalEObject)executor;
      executor = (XExecutor)eResolveProxy(oldExecutor);
      if (executor != oldExecutor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TmscXtextPackage.XEVENT__EXECUTOR, oldExecutor, executor));
      }
    }
    return executor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XExecutor basicGetExecutor()
  {
    return executor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExecutor(XExecutor newExecutor)
  {
    XExecutor oldExecutor = executor;
    executor = newExecutor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__EXECUTOR, oldExecutor, executor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XComponent getComponent()
  {
    if (component != null && component.eIsProxy())
    {
      InternalEObject oldComponent = (InternalEObject)component;
      component = (XComponent)eResolveProxy(oldComponent);
      if (component != oldComponent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TmscXtextPackage.XEVENT__COMPONENT, oldComponent, component));
      }
    }
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XComponent basicGetComponent()
  {
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComponent(XComponent newComponent)
  {
    XComponent oldComponent = component;
    component = newComponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__COMPONENT, oldComponent, component));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XEventType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(XEventType newType)
  {
    XEventType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunction getFunction()
  {
    if (function != null && function.eIsProxy())
    {
      InternalEObject oldFunction = (InternalEObject)function;
      function = (XFunction)eResolveProxy(oldFunction);
      if (function != oldFunction)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TmscXtextPackage.XEVENT__FUNCTION, oldFunction, function));
      }
    }
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XFunction basicGetFunction()
  {
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunction(XFunction newFunction)
  {
    XFunction oldFunction = function;
    function = newFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__FUNCTION, oldFunction, function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XEventArgument> getArguments()
  {
    if (arguments == null)
    {
      arguments = new EObjectContainmentEList<XEventArgument>(XEventArgument.class, this, TmscXtextPackage.XEVENT__ARGUMENTS);
    }
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XDependency> getOutgoingDependencies()
  {
    if (outgoingDependencies == null)
    {
      outgoingDependencies = new EObjectContainmentEList<XDependency>(XDependency.class, this, TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES);
    }
    return outgoingDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XDependency> getIncomingDependencies()
  {
    if (incomingDependencies == null)
    {
      incomingDependencies = new EObjectResolvingEList<XDependency>(XDependency.class, this, TmscXtextPackage.XEVENT__INCOMING_DEPENDENCIES);
    }
    return incomingDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Boolean getScheduled()
  {
    return scheduled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduled(Boolean newScheduled)
  {
    Boolean oldScheduled = scheduled;
    scheduled = newScheduled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XEVENT__SCHEDULED, oldScheduled, scheduled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<XProperty>(XProperty.class, this, TmscXtextPackage.XEVENT__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XEVENT__ARGUMENTS:
        return ((InternalEList<?>)getArguments()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES:
        return ((InternalEList<?>)getOutgoingDependencies()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.XEVENT__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XEVENT__TIMESTAMP:
        return getTimestamp();
      case TmscXtextPackage.XEVENT__TIME_BOUND:
        return getTimeBound();
      case TmscXtextPackage.XEVENT__EXECUTOR:
        if (resolve) return getExecutor();
        return basicGetExecutor();
      case TmscXtextPackage.XEVENT__COMPONENT:
        if (resolve) return getComponent();
        return basicGetComponent();
      case TmscXtextPackage.XEVENT__TYPE:
        return getType();
      case TmscXtextPackage.XEVENT__FUNCTION:
        if (resolve) return getFunction();
        return basicGetFunction();
      case TmscXtextPackage.XEVENT__ARGUMENTS:
        return getArguments();
      case TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES:
        return getOutgoingDependencies();
      case TmscXtextPackage.XEVENT__INCOMING_DEPENDENCIES:
        return getIncomingDependencies();
      case TmscXtextPackage.XEVENT__SCHEDULED:
        return getScheduled();
      case TmscXtextPackage.XEVENT__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XEVENT__TIMESTAMP:
        setTimestamp((BigDecimal)newValue);
        return;
      case TmscXtextPackage.XEVENT__TIME_BOUND:
        setTimeBound((BigDecimal)newValue);
        return;
      case TmscXtextPackage.XEVENT__EXECUTOR:
        setExecutor((XExecutor)newValue);
        return;
      case TmscXtextPackage.XEVENT__COMPONENT:
        setComponent((XComponent)newValue);
        return;
      case TmscXtextPackage.XEVENT__TYPE:
        setType((XEventType)newValue);
        return;
      case TmscXtextPackage.XEVENT__FUNCTION:
        setFunction((XFunction)newValue);
        return;
      case TmscXtextPackage.XEVENT__ARGUMENTS:
        getArguments().clear();
        getArguments().addAll((Collection<? extends XEventArgument>)newValue);
        return;
      case TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES:
        getOutgoingDependencies().clear();
        getOutgoingDependencies().addAll((Collection<? extends XDependency>)newValue);
        return;
      case TmscXtextPackage.XEVENT__INCOMING_DEPENDENCIES:
        getIncomingDependencies().clear();
        getIncomingDependencies().addAll((Collection<? extends XDependency>)newValue);
        return;
      case TmscXtextPackage.XEVENT__SCHEDULED:
        setScheduled((Boolean)newValue);
        return;
      case TmscXtextPackage.XEVENT__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends XProperty>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XEVENT__TIMESTAMP:
        setTimestamp(TIMESTAMP_EDEFAULT);
        return;
      case TmscXtextPackage.XEVENT__TIME_BOUND:
        setTimeBound(TIME_BOUND_EDEFAULT);
        return;
      case TmscXtextPackage.XEVENT__EXECUTOR:
        setExecutor((XExecutor)null);
        return;
      case TmscXtextPackage.XEVENT__COMPONENT:
        setComponent((XComponent)null);
        return;
      case TmscXtextPackage.XEVENT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case TmscXtextPackage.XEVENT__FUNCTION:
        setFunction((XFunction)null);
        return;
      case TmscXtextPackage.XEVENT__ARGUMENTS:
        getArguments().clear();
        return;
      case TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES:
        getOutgoingDependencies().clear();
        return;
      case TmscXtextPackage.XEVENT__INCOMING_DEPENDENCIES:
        getIncomingDependencies().clear();
        return;
      case TmscXtextPackage.XEVENT__SCHEDULED:
        setScheduled(SCHEDULED_EDEFAULT);
        return;
      case TmscXtextPackage.XEVENT__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XEVENT__TIMESTAMP:
        return TIMESTAMP_EDEFAULT == null ? timestamp != null : !TIMESTAMP_EDEFAULT.equals(timestamp);
      case TmscXtextPackage.XEVENT__TIME_BOUND:
        return TIME_BOUND_EDEFAULT == null ? timeBound != null : !TIME_BOUND_EDEFAULT.equals(timeBound);
      case TmscXtextPackage.XEVENT__EXECUTOR:
        return executor != null;
      case TmscXtextPackage.XEVENT__COMPONENT:
        return component != null;
      case TmscXtextPackage.XEVENT__TYPE:
        return type != TYPE_EDEFAULT;
      case TmscXtextPackage.XEVENT__FUNCTION:
        return function != null;
      case TmscXtextPackage.XEVENT__ARGUMENTS:
        return arguments != null && !arguments.isEmpty();
      case TmscXtextPackage.XEVENT__OUTGOING_DEPENDENCIES:
        return outgoingDependencies != null && !outgoingDependencies.isEmpty();
      case TmscXtextPackage.XEVENT__INCOMING_DEPENDENCIES:
        return incomingDependencies != null && !incomingDependencies.isEmpty();
      case TmscXtextPackage.XEVENT__SCHEDULED:
        return SCHEDULED_EDEFAULT == null ? scheduled != null : !SCHEDULED_EDEFAULT.equals(scheduled);
      case TmscXtextPackage.XEVENT__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (timestamp: ");
    result.append(timestamp);
    result.append(", timeBound: ");
    result.append(timeBound);
    result.append(", type: ");
    result.append(type);
    result.append(", scheduled: ");
    result.append(scheduled);
    result.append(')');
    return result.toString();
  }

} //XEventImpl
