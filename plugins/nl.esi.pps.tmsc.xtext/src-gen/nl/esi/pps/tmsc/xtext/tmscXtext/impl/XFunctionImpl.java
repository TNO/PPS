/**
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.tmscXtext.impl;

import java.math.BigDecimal;

import java.util.Collection;

import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextPackage;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunction;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunctionParameter;
import nl.esi.pps.tmsc.xtext.tmscXtext.XOperation;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XFunction</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#isIpcClient <em>Ipc Client</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#isIpcServer <em>Ipc Server</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#getOperation <em>Operation</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#getTimeBound <em>Time Bound</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.XFunctionImpl#getScheduled <em>Scheduled</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XFunctionImpl extends XNamedArchitectureElementImpl implements XFunction
{
  /**
   * The default value of the '{@link #isIpcClient() <em>Ipc Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIpcClient()
   * @generated
   * @ordered
   */
  protected static final boolean IPC_CLIENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIpcClient() <em>Ipc Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIpcClient()
   * @generated
   * @ordered
   */
  protected boolean ipcClient = IPC_CLIENT_EDEFAULT;

  /**
   * The default value of the '{@link #isIpcServer() <em>Ipc Server</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIpcServer()
   * @generated
   * @ordered
   */
  protected static final boolean IPC_SERVER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIpcServer() <em>Ipc Server</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIpcServer()
   * @generated
   * @ordered
   */
  protected boolean ipcServer = IPC_SERVER_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<XFunctionParameter> parameters;

  /**
   * The cached value of the '{@link #getOperation() <em>Operation</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected XOperation operation;

  /**
   * The default value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TIME_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected BigDecimal timeBound = TIME_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected static final Boolean SCHEDULED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected Boolean scheduled = SCHEDULED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TmscXtextPackage.Literals.XFUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIpcClient()
  {
    return ipcClient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIpcClient(boolean newIpcClient)
  {
    boolean oldIpcClient = ipcClient;
    ipcClient = newIpcClient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XFUNCTION__IPC_CLIENT, oldIpcClient, ipcClient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIpcServer()
  {
    return ipcServer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIpcServer(boolean newIpcServer)
  {
    boolean oldIpcServer = ipcServer;
    ipcServer = newIpcServer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XFUNCTION__IPC_SERVER, oldIpcServer, ipcServer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XFunctionParameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<XFunctionParameter>(XFunctionParameter.class, this, TmscXtextPackage.XFUNCTION__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XOperation getOperation()
  {
    if (operation != null && operation.eIsProxy())
    {
      InternalEObject oldOperation = (InternalEObject)operation;
      operation = (XOperation)eResolveProxy(oldOperation);
      if (operation != oldOperation)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TmscXtextPackage.XFUNCTION__OPERATION, oldOperation, operation));
      }
    }
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XOperation basicGetOperation()
  {
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperation(XOperation newOperation)
  {
    XOperation oldOperation = operation;
    operation = newOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XFUNCTION__OPERATION, oldOperation, operation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTimeBound()
  {
    return timeBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeBound(BigDecimal newTimeBound)
  {
    BigDecimal oldTimeBound = timeBound;
    timeBound = newTimeBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XFUNCTION__TIME_BOUND, oldTimeBound, timeBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Boolean getScheduled()
  {
    return scheduled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduled(Boolean newScheduled)
  {
    Boolean oldScheduled = scheduled;
    scheduled = newScheduled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.XFUNCTION__SCHEDULED, oldScheduled, scheduled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XFUNCTION__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XFUNCTION__IPC_CLIENT:
        return isIpcClient();
      case TmscXtextPackage.XFUNCTION__IPC_SERVER:
        return isIpcServer();
      case TmscXtextPackage.XFUNCTION__PARAMETERS:
        return getParameters();
      case TmscXtextPackage.XFUNCTION__OPERATION:
        if (resolve) return getOperation();
        return basicGetOperation();
      case TmscXtextPackage.XFUNCTION__TIME_BOUND:
        return getTimeBound();
      case TmscXtextPackage.XFUNCTION__SCHEDULED:
        return getScheduled();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XFUNCTION__IPC_CLIENT:
        setIpcClient((Boolean)newValue);
        return;
      case TmscXtextPackage.XFUNCTION__IPC_SERVER:
        setIpcServer((Boolean)newValue);
        return;
      case TmscXtextPackage.XFUNCTION__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends XFunctionParameter>)newValue);
        return;
      case TmscXtextPackage.XFUNCTION__OPERATION:
        setOperation((XOperation)newValue);
        return;
      case TmscXtextPackage.XFUNCTION__TIME_BOUND:
        setTimeBound((BigDecimal)newValue);
        return;
      case TmscXtextPackage.XFUNCTION__SCHEDULED:
        setScheduled((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XFUNCTION__IPC_CLIENT:
        setIpcClient(IPC_CLIENT_EDEFAULT);
        return;
      case TmscXtextPackage.XFUNCTION__IPC_SERVER:
        setIpcServer(IPC_SERVER_EDEFAULT);
        return;
      case TmscXtextPackage.XFUNCTION__PARAMETERS:
        getParameters().clear();
        return;
      case TmscXtextPackage.XFUNCTION__OPERATION:
        setOperation((XOperation)null);
        return;
      case TmscXtextPackage.XFUNCTION__TIME_BOUND:
        setTimeBound(TIME_BOUND_EDEFAULT);
        return;
      case TmscXtextPackage.XFUNCTION__SCHEDULED:
        setScheduled(SCHEDULED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.XFUNCTION__IPC_CLIENT:
        return ipcClient != IPC_CLIENT_EDEFAULT;
      case TmscXtextPackage.XFUNCTION__IPC_SERVER:
        return ipcServer != IPC_SERVER_EDEFAULT;
      case TmscXtextPackage.XFUNCTION__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case TmscXtextPackage.XFUNCTION__OPERATION:
        return operation != null;
      case TmscXtextPackage.XFUNCTION__TIME_BOUND:
        return TIME_BOUND_EDEFAULT == null ? timeBound != null : !TIME_BOUND_EDEFAULT.equals(timeBound);
      case TmscXtextPackage.XFUNCTION__SCHEDULED:
        return SCHEDULED_EDEFAULT == null ? scheduled != null : !SCHEDULED_EDEFAULT.equals(scheduled);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ipcClient: ");
    result.append(ipcClient);
    result.append(", ipcServer: ");
    result.append(ipcServer);
    result.append(", timeBound: ");
    result.append(timeBound);
    result.append(", scheduled: ");
    result.append(scheduled);
    result.append(')');
    return result.toString();
  }

} //XFunctionImpl
