/*
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.esi.pps.tmsc.xtext.services.TmscXtextGrammarAccess;
import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextModel;
import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextPackage;
import nl.esi.pps.tmsc.xtext.tmscXtext.XComponent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependency;
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependencySettings;
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependencyTypeObject;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEvent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEventArgument;
import nl.esi.pps.tmsc.xtext.tmscXtext.XExecutor;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunction;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunctionParameter;
import nl.esi.pps.tmsc.xtext.tmscXtext.XHost;
import nl.esi.pps.tmsc.xtext.tmscXtext.XInterface;
import nl.esi.pps.tmsc.xtext.tmscXtext.XOperation;
import nl.esi.pps.tmsc.xtext.tmscXtext.XProperty;
import nl.esi.pps.tmsc.xtext.tmscXtext.XPropertyBooleanValue;
import nl.esi.pps.tmsc.xtext.tmscXtext.XPropertyMutliValue;
import nl.esi.pps.tmsc.xtext.tmscXtext.XPropertyNumberValue;
import nl.esi.pps.tmsc.xtext.tmscXtext.XPropertyStringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TmscXtextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TmscXtextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TmscXtextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TmscXtextPackage.TMSC_XTEXT_MODEL:
				sequence_TmscXtextModel(context, (TmscXtextModel) semanticObject); 
				return; 
			case TmscXtextPackage.XCOMPONENT:
				sequence_XComponent(context, (XComponent) semanticObject); 
				return; 
			case TmscXtextPackage.XDEPENDENCY:
				sequence_XDependency(context, (XDependency) semanticObject); 
				return; 
			case TmscXtextPackage.XDEPENDENCY_SETTINGS:
				sequence_XDependencySettings(context, (XDependencySettings) semanticObject); 
				return; 
			case TmscXtextPackage.XDEPENDENCY_TYPE_OBJECT:
				sequence_XDependencyTypeObject(context, (XDependencyTypeObject) semanticObject); 
				return; 
			case TmscXtextPackage.XEVENT:
				sequence_XEvent(context, (XEvent) semanticObject); 
				return; 
			case TmscXtextPackage.XEVENT_ARGUMENT:
				sequence_XEventArgument(context, (XEventArgument) semanticObject); 
				return; 
			case TmscXtextPackage.XEXECUTOR:
				sequence_XExecutor(context, (XExecutor) semanticObject); 
				return; 
			case TmscXtextPackage.XFUNCTION:
				sequence_XFunction(context, (XFunction) semanticObject); 
				return; 
			case TmscXtextPackage.XFUNCTION_PARAMETER:
				sequence_XFunctionParameter(context, (XFunctionParameter) semanticObject); 
				return; 
			case TmscXtextPackage.XHOST:
				sequence_XHost(context, (XHost) semanticObject); 
				return; 
			case TmscXtextPackage.XINTERFACE:
				sequence_XInterface(context, (XInterface) semanticObject); 
				return; 
			case TmscXtextPackage.XOPERATION:
				sequence_XOperation(context, (XOperation) semanticObject); 
				return; 
			case TmscXtextPackage.XPROPERTY:
				sequence_XProperty(context, (XProperty) semanticObject); 
				return; 
			case TmscXtextPackage.XPROPERTY_BOOLEAN_VALUE:
				sequence_XPropertyValue(context, (XPropertyBooleanValue) semanticObject); 
				return; 
			case TmscXtextPackage.XPROPERTY_MUTLI_VALUE:
				sequence_XPropertyValue(context, (XPropertyMutliValue) semanticObject); 
				return; 
			case TmscXtextPackage.XPROPERTY_NUMBER_VALUE:
				sequence_XPropertyValue(context, (XPropertyNumberValue) semanticObject); 
				return; 
			case TmscXtextPackage.XPROPERTY_STRING_VALUE:
				sequence_XPropertyValue(context, (XPropertyStringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TmscXtextModel returns TmscXtextModel
	 *
	 * Constraint:
	 *     (
	 *         architectureKind=XArchitectureKind | 
	 *         timeBound=ABS_EBIGDECIMAL | 
	 *         scheduled=EBOOLEAN_OBJECT | 
	 *         properties+=XProperty | 
	 *         dependencySettings+=XDependencySettings | 
	 *         interfaces+=XInterface | 
	 *         components+=XComponent | 
	 *         functions+=XFunction | 
	 *         hosts+=XHost | 
	 *         executors+=XExecutor | 
	 *         events+=XEvent
	 *     )*
	 */
	protected void sequence_TmscXtextModel(ISerializationContext context, TmscXtextModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XComponent
	 *     XComponent returns XComponent
	 *
	 * Constraint:
	 *     (
	 *         description=IDString? 
	 *         name=ID 
	 *         (provides+=[XInterface|ID] provides+=[XInterface|ID]*)? 
	 *         (requires+=[XInterface|ID] requires+=[XInterface|ID]*)? 
	 *         (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | properties+=XProperty)*
	 *     )
	 */
	protected void sequence_XComponent(ISerializationContext context, XComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XDependencySettings returns XDependencySettings
	 *
	 * Constraint:
	 *     (type=XDependencyType (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | prefix=IDString | properties+=XProperty)*)
	 */
	protected void sequence_XDependencySettings(ISerializationContext context, XDependencySettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XDependencyTypeObject returns XDependencyTypeObject
	 *
	 * Constraint:
	 *     value=XDependencyType
	 */
	protected void sequence_XDependencyTypeObject(ISerializationContext context, XDependencyTypeObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XDEPENDENCY_TYPE_OBJECT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XDEPENDENCY_TYPE_OBJECT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXDependencyTypeObjectAccess().getValueXDependencyTypeEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XDependency returns XDependency
	 *
	 * Constraint:
	 *     (
	 *         typeObject=XDependencyTypeObject? 
	 *         name=IDString 
	 *         (
	 *             timeBound=ABS_EBIGDECIMAL | 
	 *             (
	 *                 (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | request=[XDependency|IDString] | message=[XDependency|IDString] | properties+=XProperty) 
	 *                 timeBound=ABS_EBIGDECIMAL? 
	 *                 (
	 *                     (scheduled=EBOOLEAN_OBJECT | request=[XDependency|IDString] | message=[XDependency|IDString] | properties+=XProperty)? 
	 *                     timeBound=ABS_EBIGDECIMAL?
	 *                 )*
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_XDependency(ISerializationContext context, XDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XEventArgument returns XEventArgument
	 *
	 * Constraint:
	 *     (parameter=[XFunctionParameter|ID] value=IDString)
	 */
	protected void sequence_XEventArgument(ISerializationContext context, XEventArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XEVENT_ARGUMENT__PARAMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XEVENT_ARGUMENT__PARAMETER));
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XEVENT_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XEVENT_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXEventArgumentAccess().getParameterXFunctionParameterIDTerminalRuleCall_0_0_1(), semanticObject.eGet(TmscXtextPackage.Literals.XEVENT_ARGUMENT__PARAMETER, false));
		feeder.accept(grammarAccess.getXEventArgumentAccess().getValueIDStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XEvent returns XEvent
	 *
	 * Constraint:
	 *     (
	 *         (timestamp=ISO8601 | timestamp=ABS_EBIGDECIMAL)? 
	 *         timeBound=POS_EBIGDECIMAL? 
	 *         executor=[XExecutor|FQNString] 
	 *         component=[XComponent|IDString]? 
	 *         type=XEventType 
	 *         function=[XFunction|IDString] 
	 *         (arguments+=XEventArgument arguments+=XEventArgument*)? 
	 *         (outgoingDependencies+=XDependency | incomingDependencies+=[XDependency|IDString])* 
	 *         scheduled=EBOOLEAN_OBJECT? 
	 *         (properties+=XProperty? scheduled=EBOOLEAN_OBJECT?)*
	 *     )
	 */
	protected void sequence_XEvent(ISerializationContext context, XEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XExecutor
	 *     XExecutor returns XExecutor
	 *
	 * Constraint:
	 *     (untraced?='untraced'? description=IDString? name=ID (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | properties+=XProperty)*)
	 */
	protected void sequence_XExecutor(ISerializationContext context, XExecutor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XFunctionParameter returns XFunctionParameter
	 *
	 * Constraint:
	 *     (kind=XFunctionParameterKind name=ID (properties+=XProperty properties+=XProperty*)?)
	 */
	protected void sequence_XFunctionParameter(ISerializationContext context, XFunctionParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XFunction
	 *     XFunction returns XFunction
	 *
	 * Constraint:
	 *     (
	 *         (ipcClient?='ipc-client' | ipcServer?='ipc-server')? 
	 *         description=IDString? 
	 *         name=ID 
	 *         (parameters+=XFunctionParameter parameters+=XFunctionParameter*)? 
	 *         operation=[XOperation|FQN]? 
	 *         (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | properties+=XProperty)*
	 *     )
	 */
	protected void sequence_XFunction(ISerializationContext context, XFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XHost
	 *     XHost returns XHost
	 *
	 * Constraint:
	 *     (
	 *         untraced?='untraced'? 
	 *         description=IDString? 
	 *         name=ID 
	 *         (timeBound=ABS_EBIGDECIMAL | scheduled=EBOOLEAN_OBJECT | properties+=XProperty | executors+=XExecutor)*
	 *     )
	 */
	protected void sequence_XHost(ISerializationContext context, XHost semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XInterface
	 *     XInterface returns XInterface
	 *
	 * Constraint:
	 *     (description=IDString? name=ID (properties+=XProperty | operations+=XOperation)*)
	 */
	protected void sequence_XInterface(ISerializationContext context, XInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XNamedArchitectureElement returns XOperation
	 *     XOperation returns XOperation
	 *
	 * Constraint:
	 *     (description=IDString? name=ID properties+=XProperty*)
	 */
	protected void sequence_XOperation(ISerializationContext context, XOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPropertyValue returns XPropertyBooleanValue
	 *
	 * Constraint:
	 *     value=EBOOLEAN_OBJECT
	 */
	protected void sequence_XPropertyValue(ISerializationContext context, XPropertyBooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XPROPERTY_BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XPROPERTY_BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPropertyValueAccess().getValueEBOOLEAN_OBJECTParserRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPropertyValue returns XPropertyMutliValue
	 *
	 * Constraint:
	 *     (values+=XPropertyValue values+=XPropertyValue*)
	 */
	protected void sequence_XPropertyValue(ISerializationContext context, XPropertyMutliValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPropertyValue returns XPropertyNumberValue
	 *
	 * Constraint:
	 *     value=EBIGDECIMAL
	 */
	protected void sequence_XPropertyValue(ISerializationContext context, XPropertyNumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XPROPERTY_NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XPROPERTY_NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPropertyValueAccess().getValueEBIGDECIMALParserRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPropertyValue returns XPropertyStringValue
	 *
	 * Constraint:
	 *     value=IDString
	 */
	protected void sequence_XPropertyValue(ISerializationContext context, XPropertyStringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XPROPERTY_STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XPROPERTY_STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPropertyValueAccess().getValueIDStringParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XProperty returns XProperty
	 *
	 * Constraint:
	 *     (name=IDString value=XPropertyValue)
	 */
	protected void sequence_XProperty(ISerializationContext context, XProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XPROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XPROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, TmscXtextPackage.Literals.XPROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmscXtextPackage.Literals.XPROPERTY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPropertyAccess().getNameIDStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getXPropertyAccess().getValueXPropertyValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
