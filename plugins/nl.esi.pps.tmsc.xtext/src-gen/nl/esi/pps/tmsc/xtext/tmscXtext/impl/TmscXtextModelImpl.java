/**
 * Generated by Xtext, all rights reserved ESI (TNO)
 */
package nl.esi.pps.tmsc.xtext.tmscXtext.impl;

import java.math.BigDecimal;

import java.util.Collection;

import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextModel;
import nl.esi.pps.tmsc.xtext.tmscXtext.TmscXtextPackage;
import nl.esi.pps.tmsc.xtext.tmscXtext.XArchitectureKind;
import nl.esi.pps.tmsc.xtext.tmscXtext.XComponent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XDependencySettings;
import nl.esi.pps.tmsc.xtext.tmscXtext.XEvent;
import nl.esi.pps.tmsc.xtext.tmscXtext.XExecutor;
import nl.esi.pps.tmsc.xtext.tmscXtext.XFunction;
import nl.esi.pps.tmsc.xtext.tmscXtext.XInterface;
import nl.esi.pps.tmsc.xtext.tmscXtext.XProperty;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getArchitectureKind <em>Architecture Kind</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getTimeBound <em>Time Bound</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getScheduled <em>Scheduled</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getDependencySettings <em>Dependency Settings</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getInterfaces <em>Interfaces</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getExecutors <em>Executors</em>}</li>
 *   <li>{@link nl.esi.pps.tmsc.xtext.tmscXtext.impl.TmscXtextModelImpl#getEvents <em>Events</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TmscXtextModelImpl extends MinimalEObjectImpl.Container implements TmscXtextModel
{
  /**
   * The default value of the '{@link #getArchitectureKind() <em>Architecture Kind</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArchitectureKind()
   * @generated
   * @ordered
   */
  protected static final XArchitectureKind ARCHITECTURE_KIND_EDEFAULT = XArchitectureKind.INTERNAL;

  /**
   * The cached value of the '{@link #getArchitectureKind() <em>Architecture Kind</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArchitectureKind()
   * @generated
   * @ordered
   */
  protected XArchitectureKind architectureKind = ARCHITECTURE_KIND_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TIME_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeBound() <em>Time Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeBound()
   * @generated
   * @ordered
   */
  protected BigDecimal timeBound = TIME_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected static final Boolean SCHEDULED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScheduled() <em>Scheduled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduled()
   * @generated
   * @ordered
   */
  protected Boolean scheduled = SCHEDULED_EDEFAULT;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<XProperty> properties;

  /**
   * The cached value of the '{@link #getDependencySettings() <em>Dependency Settings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependencySettings()
   * @generated
   * @ordered
   */
  protected EList<XDependencySettings> dependencySettings;

  /**
   * The cached value of the '{@link #getInterfaces() <em>Interfaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterfaces()
   * @generated
   * @ordered
   */
  protected EList<XInterface> interfaces;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<XComponent> components;

  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<XFunction> functions;

  /**
   * The cached value of the '{@link #getExecutors() <em>Executors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecutors()
   * @generated
   * @ordered
   */
  protected EList<XExecutor> executors;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<XEvent> events;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TmscXtextModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TmscXtextPackage.Literals.TMSC_XTEXT_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XArchitectureKind getArchitectureKind()
  {
    return architectureKind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArchitectureKind(XArchitectureKind newArchitectureKind)
  {
    XArchitectureKind oldArchitectureKind = architectureKind;
    architectureKind = newArchitectureKind == null ? ARCHITECTURE_KIND_EDEFAULT : newArchitectureKind;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.TMSC_XTEXT_MODEL__ARCHITECTURE_KIND, oldArchitectureKind, architectureKind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTimeBound()
  {
    return timeBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeBound(BigDecimal newTimeBound)
  {
    BigDecimal oldTimeBound = timeBound;
    timeBound = newTimeBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.TMSC_XTEXT_MODEL__TIME_BOUND, oldTimeBound, timeBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Boolean getScheduled()
  {
    return scheduled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduled(Boolean newScheduled)
  {
    Boolean oldScheduled = scheduled;
    scheduled = newScheduled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TmscXtextPackage.TMSC_XTEXT_MODEL__SCHEDULED, oldScheduled, scheduled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<XProperty>(XProperty.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XDependencySettings> getDependencySettings()
  {
    if (dependencySettings == null)
    {
      dependencySettings = new EObjectContainmentEList<XDependencySettings>(XDependencySettings.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS);
    }
    return dependencySettings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XInterface> getInterfaces()
  {
    if (interfaces == null)
    {
      interfaces = new EObjectContainmentEList<XInterface>(XInterface.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES);
    }
    return interfaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XComponent> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<XComponent>(XComponent.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XFunction> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<XFunction>(XFunction.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XExecutor> getExecutors()
  {
    if (executors == null)
    {
      executors = new EObjectContainmentEList<XExecutor>(XExecutor.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS);
    }
    return executors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XEvent> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<XEvent>(XEvent.class, this, TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS:
        return ((InternalEList<?>)getDependencySettings()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES:
        return ((InternalEList<?>)getInterfaces()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS:
        return ((InternalEList<?>)getExecutors()).basicRemove(otherEnd, msgs);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TmscXtextPackage.TMSC_XTEXT_MODEL__ARCHITECTURE_KIND:
        return getArchitectureKind();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__TIME_BOUND:
        return getTimeBound();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__SCHEDULED:
        return getScheduled();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES:
        return getProperties();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS:
        return getDependencySettings();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES:
        return getInterfaces();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS:
        return getComponents();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS:
        return getFunctions();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS:
        return getExecutors();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS:
        return getEvents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TmscXtextPackage.TMSC_XTEXT_MODEL__ARCHITECTURE_KIND:
        setArchitectureKind((XArchitectureKind)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__TIME_BOUND:
        setTimeBound((BigDecimal)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__SCHEDULED:
        setScheduled((Boolean)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends XProperty>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS:
        getDependencySettings().clear();
        getDependencySettings().addAll((Collection<? extends XDependencySettings>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES:
        getInterfaces().clear();
        getInterfaces().addAll((Collection<? extends XInterface>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends XComponent>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends XFunction>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS:
        getExecutors().clear();
        getExecutors().addAll((Collection<? extends XExecutor>)newValue);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends XEvent>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.TMSC_XTEXT_MODEL__ARCHITECTURE_KIND:
        setArchitectureKind(ARCHITECTURE_KIND_EDEFAULT);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__TIME_BOUND:
        setTimeBound(TIME_BOUND_EDEFAULT);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__SCHEDULED:
        setScheduled(SCHEDULED_EDEFAULT);
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES:
        getProperties().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS:
        getDependencySettings().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES:
        getInterfaces().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS:
        getComponents().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS:
        getFunctions().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS:
        getExecutors().clear();
        return;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS:
        getEvents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TmscXtextPackage.TMSC_XTEXT_MODEL__ARCHITECTURE_KIND:
        return architectureKind != ARCHITECTURE_KIND_EDEFAULT;
      case TmscXtextPackage.TMSC_XTEXT_MODEL__TIME_BOUND:
        return TIME_BOUND_EDEFAULT == null ? timeBound != null : !TIME_BOUND_EDEFAULT.equals(timeBound);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__SCHEDULED:
        return SCHEDULED_EDEFAULT == null ? scheduled != null : !SCHEDULED_EDEFAULT.equals(scheduled);
      case TmscXtextPackage.TMSC_XTEXT_MODEL__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__DEPENDENCY_SETTINGS:
        return dependencySettings != null && !dependencySettings.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__INTERFACES:
        return interfaces != null && !interfaces.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__COMPONENTS:
        return components != null && !components.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__FUNCTIONS:
        return functions != null && !functions.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EXECUTORS:
        return executors != null && !executors.isEmpty();
      case TmscXtextPackage.TMSC_XTEXT_MODEL__EVENTS:
        return events != null && !events.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (architectureKind: ");
    result.append(architectureKind);
    result.append(", timeBound: ");
    result.append(timeBound);
    result.append(", scheduled: ");
    result.append(scheduled);
    result.append(')');
    return result.toString();
  }

} //TmscXtextModelImpl
